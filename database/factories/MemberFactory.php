<?php

namespace Database\Factories;

use App\Models\Member;
use App\Models\Branch;
use Illuminate\Database\Eloquent\Factories\Factory;

class MemberFactory extends Factory
{
    protected $model = Member::class;

    public function definition(): array
    {
        return [
            'member_number' => 'MEM' . date('Y') . str_pad(fake()->unique()->numberBetween(1, 9999), 4, '0', STR_PAD_LEFT),
            'member_number_auto_generated' => true,
            'first_name' => fake()->firstName(),
            'middle_name' => fake()->optional()->firstName(),
            'last_name' => fake()->lastName(),
            'full_name' => null, // Will be auto-generated by model
            'email' => fake()->unique()->safeEmail(),
            'phone' => '98' . fake()->numberBetween(10000000, 99999999),
            'phone_secondary' => fake()->optional()->regexify('98[0-9]{8}'),
            'branch_id' => Branch::factory(),
            'date_of_birth' => fake()->date('Y-m-d', '2000-01-01'),
            'gender' => fake()->randomElement(['male', 'female', 'other']),
            'address' => fake()->address(),
            'citizenship_number' => fake()->numerify('##-##-##-#####'),
            'occupation' => fake()->jobTitle(),
            'monthly_income' => fake()->numberBetween(10000, 200000), // Changed from annual_income
            'guardian_name' => fake()->optional()->name(),
            'guardian_phone' => fake()->optional()->regexify('98[0-9]{8}'),
            'guardian_relation' => fake()->optional()->randomElement(['father', 'mother', 'spouse', 'brother', 'sister', 'uncle', 'aunt']),
            'family_members' => json_encode([]), // JSON field
            'profile_image' => null,
            'kyc_documents' => json_encode([]), // JSON field
            'status' => fake()->randomElement(['active', 'inactive', 'suspended', 'kyc_pending']),
            'kyc_status' => fake()->randomElement(['pending', 'verified', 'rejected']),
            'membership_date' => fake()->date('Y-m-d'),
        ];
    }

    public function active(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'active',
        ]);
    }

    public function kycVerified(): static
    {
        return $this->state(fn (array $attributes) => [
            'kyc_status' => 'verified',
        ]);
    }

    public function withGuardian(): static
    {
        return $this->state(fn (array $attributes) => [
            'guardian_name' => fake()->name(),
            'guardian_phone' => '98' . fake()->numberBetween(10000000, 99999999),
            'guardian_relation' => fake()->randomElement(['father', 'mother', 'spouse']),
        ]);
    }

    public function withFamilyMembers(): static
    {
        $familyMembers = [];
        $count = fake()->numberBetween(1, 3);
        
        for ($i = 0; $i < $count; $i++) {
            $familyMembers[] = [
                'name' => fake()->name(),
                'relation' => fake()->randomElement(['spouse', 'child', 'parent', 'sibling']),
                'age' => fake()->numberBetween(1, 80),
            ];
        }
        
        return $this->state(fn (array $attributes) => [
            'family_members' => json_encode($familyMembers),
        ]);
    }
}